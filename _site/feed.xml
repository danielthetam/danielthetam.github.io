

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>danielthetam.github.io</title>
  <subtitle>This blog acts as a host for any documentation for my projects, however, if you are interested, my personal blog  can be found at danieltam.com</subtitle>
  <updated>2023-11-21T11:51:50+08:00</updated>
  <author>
    <name>danielthetam</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 danielthetam </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Errors to Note</title>
    <link href="http://localhost:4000/posts/errors-to-note/" rel="alternate" type="text/html" title="Errors to Note" />
    <published>2023-09-16T15:30:00+08:00</published>
  
    <updated>2023-09-16T15:30:00+08:00</updated>
  
    <id>http://localhost:4000/posts/errors-to-note/</id>
    <content src="http://localhost:4000/posts/errors-to-note/" />
    <author>
      <name>danielthetam</name>
    </author>

  
    
    <category term="Projects" />
    
    <category term="jBPM-qBPM" />
    
  

  
    <summary>
      





      If SpringBoot produces an error that states that the port is in use, that means you have to navigate back to the application.properties file and change the server port to any open port on your device.

In the case that any other errors come up, do attempt to search it up as setup will differ from environment to environment, or as a last resort, you may contact me from my website.

    </summary>
  

  </entry>

  
  <entry>
    <title>Integrating with jBPM</title>
    <link href="http://localhost:4000/posts/integrating-with-jbpm/" rel="alternate" type="text/html" title="Integrating with jBPM" />
    <published>2023-09-16T15:30:00+08:00</published>
  
    <updated>2023-09-22T15:24:27+08:00</updated>
  
    <id>http://localhost:4000/posts/integrating-with-jbpm/</id>
    <content src="http://localhost:4000/posts/integrating-with-jbpm/" />
    <author>
      <name>danielthetam</name>
    </author>

  
    
    <category term="Projects" />
    
    <category term="jBPM-qBPM" />
    
  

  
    <summary>
      





      Setting up our Postgres database
Open your Postgres setup, and just step through everything while following the default configurations, but ensure that you note down your password and your host, and also make sure that Command Line Tools is ticked as an installation configuration.

After installation, search for psql in your search bar and open the application. Once you open it, you’ll see some...
    </summary>
  

  </entry>

  
  <entry>
    <title>Preparation for jBPM integration</title>
    <link href="http://localhost:4000/posts/preparation-for-integration/" rel="alternate" type="text/html" title="Preparation for jBPM integration" />
    <published>2023-09-16T15:30:00+08:00</published>
  
    <updated>2023-09-16T15:30:00+08:00</updated>
  
    <id>http://localhost:4000/posts/preparation-for-integration/</id>
    <content src="http://localhost:4000/posts/preparation-for-integration/" />
    <author>
      <name>danielthetam</name>
    </author>

  
    
    <category term="Projects" />
    
    <category term="jBPM-qBPM" />
    
  

  
    <summary>
      





      How does integration work?
As previously mentioned, jBPM allows for smooth integration with its accesible and well-secured REST API. It enables us to create our own powerful tools that act as an extension of jBPM, an example of such is the one I’ve created for demonstrative purposes, qBPM.

Before we begin, we need to understand the structure of qBPM. qBPM uses a React frontend and a SpringBoot...
    </summary>
  

  </entry>

  
  <entry>
    <title>Deploying our Business Process</title>
    <link href="http://localhost:4000/posts/deploying-our-process/" rel="alternate" type="text/html" title="Deploying our Business Process" />
    <published>2023-09-16T15:30:00+08:00</published>
  
    <updated>2023-09-19T23:41:26+08:00</updated>
  
    <id>http://localhost:4000/posts/deploying-our-process/</id>
    <content src="http://localhost:4000/posts/deploying-our-process/" />
    <author>
      <name>danielthetam</name>
    </author>

  
    
    <category term="Projects" />
    
    <category term="jBPM-qBPM" />
    
  

  
    <summary>
      





      Deploying our project
Before we deploy our project, we need to generate the forms required for our process. To do this, head into our request-portal process, click on the form button(form icon to the left of the Download button), and click Generate all forms. This will generate all dedicated forms for our business process. Once generated, we should see some new form assets in our project.

Now,...
    </summary>
  

  </entry>

  
  <entry>
    <title>Creating Our Business Process</title>
    <link href="http://localhost:4000/posts/creating-our-process/" rel="alternate" type="text/html" title="Creating Our Business Process" />
    <published>2023-09-16T15:30:00+08:00</published>
  
    <updated>2023-09-22T15:53:23+08:00</updated>
  
    <id>http://localhost:4000/posts/creating-our-process/</id>
    <content src="http://localhost:4000/posts/creating-our-process/" />
    <author>
      <name>danielthetam</name>
    </author>

  
    
    <category term="Projects" />
    
    <category term="jBPM-qBPM" />
    
  

  
    <summary>
      





      
  A high-level summary on how a process works
  There are two terms that we’d ought to familiarise ourselves with here. One being process definition, and the other process instance. Currently, we are creating a process definition, which can be thought of as a base blueprint for a process instance. There can be multiple process instances, which are created(or more properly-termed ‘instantiated’...
    </summary>
  

  </entry>

</feed>


