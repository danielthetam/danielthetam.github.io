[
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:30:00 +0800",
    





    
    "snippet": "Starting the jBPM ServerOnce we have installed jBPM and unzipped its contents, we can begin by navigating to the ‘bin’ folder and running ‘standalone.bat’. This will get the jBPM server up and runn...",
    "content": "Starting the jBPM ServerOnce we have installed jBPM and unzipped its contents, we can begin by navigating to the ‘bin’ folder and running ‘standalone.bat’. This will get the jBPM server up and running. Once the server is up, navigate to Business Central(“https://localhost:8080/business-central/”) where we’ll be met by the Business Central login page.Getting started with Business CentraljBPM comes with a few default accounts for us to access, one of which includes our primary user, wbadmin, which we will use to log in to Business Central with the password, “wbadmin”. By default, account passwords are the same as their usernames, except for kie-server, which uses the password “kieserver1!”. To access the list of accounts available to us, click on the cog icon on the top right of the screen and click on users.  In short, Business Central is a web-based application for users to implement, execute and monitor business processes.Creating our ProjectNow, we navigate to the Design tab and click on Projects. Next, add a new space named “MySpace”, enter your new space, add a new project and name it “WFHRequest-Portal”.  Note: Follow the specified names  Please follow the specified names because the application that we will be deploying later does in fact use these names. So make sure each name matches perfectly.Creating Data ObjectsNow, we will begin adding our assets. First, let’s clarify what objects we’d need for our request portal. The best way to do this is to visualise our process by creating a scenario and analysing it.In our portal, we’ll have an actor who submits a request, groups of actors who process the request and a final actor who decides whether the request is approved or not. Ultimately, all of these actors are employees, so that can be declared as an object of itself. Then, we also have the request object, which should contain information about the request made by the first actor.Employee Data ObjectNow, let’s add a Data Object(which are underlyingly Java object classes with fields you can define) named Employee and package it under “com.myspace.wfhrequest_portal”. Let’s add some fields which define the attributes of each employee.Add the fields:  Identifier: eid          Label: Employee ID      Type: Long        Identifier: email          Label: Email      Type: String        Identifier: name          Label: Name      Type: String      We then save the object by clicking on “Save”.Request Data ObjectWe’ll add another Data Object named Request, and package it under “com.myspace.wfhrequest_portal”. Now, we’ll define the attributes for our Request object.Add the fields:  Identifier: numOfDays          Label: Number of Days      Type: Integer        Identifier: reason          Label: Reason      Type: String        Identifier: reqDt          Label: Rq Dt      Type: Integer      numOfDays represents the number of days the employee will be working from home, starting on reqDt(the requested date). reason represents the reason for the request. Once again we save the object.Defining our business processNow, we shall design the business process and define its flow. Because this is a demo application, we’ll keep things simple instead of creating overwhelmingly complex processes.  Scenario Reference  In our portal, we’ll have an actor who submits a request, groups of actors who process the request and a final actor who decides whether the request is approved or not. Ultimately, all of these actors are employees, so that can be declared as an object of itself. Then, we also have the request object, which should contain information about the request made by the first actor.Our goal now is to turn the above thoughts into action. Let’s start off by adding a new business process asset into the project and naming it ‘request-portal’. Below is a reference image and a spoiler for what our business process will look like at the end of the day.ADD REFERENCE IMAGESubmission StageFrom the above, we know that our process involves these three stages: submission, processing and a final approval. To represent submission(i.e the start of the process), we will drag a start node(the plain green circle) into our editor space.Processing StagesNow, in the processing stage, we can break it down into two sub-stages: manual filtering by Processing Officers, and the assignment of the appropriate department manager by a Human Resources team.Since these are tasks assigned to humans, let’s click on the Activities button(can be identified by a plain rounded rectangle on the menu of nodes on the left) and drag in a User node. Then we connect the start node to it. Nodes can be connected together by clicking on the preceding node, selecting the solid arrow icon and dragging it towards the following node. Click on the User node and edit its name to “Manual Filtering” in the Properties window on the right.If there doesn’t appear to be any window, click on the pencil-paper icon on the upper right corner to expand it.Then, we drag in another User node, and we then name it “Department Manager Assignment”.Before connecting the two, we need a BPMN(Business Process Model and Notation) gateway, which can be thought of as a logic gate which helps us implement conditional statements in our process. This gateway is needed to split our results into two cases based on the input of Process Officers. One being an approval from Process Officers where it will lead to the Department Manager Assignment task, and another where it is rejected, and leads to an early-ending and a notice email of rejection to the employee. A list of gateways and what they generally perform can be found here.Let’s click on the Gateways button and drag an “Exclusive” gateway in between our two task nodes. CONTINUE FROM HERENow, click on the upper right pencil-paper icon to edit the properties of our process. Then, click on Process Data to expand the list, and there we can edit our process variables. These are variables that we need to keep track of globally throughout the execution of the process. Based on the scenario reference, we know that we’ll need a variable named employee of data type Employee which represents the employee who submitted the request. Besides that, we’ll need another variable named request of data type Request, which represents the request the employee has submitted. At the end of the day, these two variables will be filled up by the employee looking to submit a request to work from home.  Note  There are two terms we need to familiarise ourselves with here. One being Process Definition, and the other Process Instance. Currently, we are creating a process definition, which can be thought of as a base blueprint for a Process Instance. There can be multiple Process Instances, which are created(or ‘instantiated’ when going for proper terms) when the employee wants to submit a request. Each instance is different from each other, primarily based on differences in process variables that are defined by user input(like our employee and request variable that needs to be filled up by the requester), but they all follow the same underlying logic and flow according to our Process Definition."
  },
  
  {
    "title": "Introduction",
    "url": "/posts/introduction/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:00:00 +0800",
    





    
    "snippet": "  Disclaimer  I am by no means a professional on the topics mentioned nor the technologies, rather, this documentation is a blog on my experience as an amateurand hopefully serves as a light in the...",
    "content": "  Disclaimer  I am by no means a professional on the topics mentioned nor the technologies, rather, this documentation is a blog on my experience as an amateurand hopefully serves as a light in the dark for beginners or any curious developers looking to perform a little project with business automation.What is jBPM?jBPM is a business automation tool for automating business processes with ease, and providing accessibility through REST APIs and comprehensive documentation for said APIs. Optionally, with jBPM as a foundation, we can also build our own powerful applications and tools to personalise our experience, one of which includes qBPM.What is qBPM?qBPM is a demonstrative web application for showcasing how jBPM can be used to create powerful tools through smooth integrations with various open source technologies.Purpose of this DocumentationThis documentation will be dedicated to walking you through how you can set up a jBPM server, customise it to fit our needs, utilise jBPM to create automated processes, and integrate them with qBPM, our own custom webapp for presenting these automated processes.What will we be creating in this walkthrough?We will be using jBPM to create a work from home request portal to automate the process of requesting to work from home. This will help ease the lives of our HR team as well as employees.Prerequisites  Installation of jBPM Server Distribution  Node.js LTS  Postgres  JDK 17  Stable version of Apache Maven  Visual Studio Code  Note  Every process mentioned in this documentation is based on my experience in Windows 10, so do keep in mind that results may vary from operating system to operating system"
  }
  
]

