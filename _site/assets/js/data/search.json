[
  
  {
    "title": "Creating Our Process",
    "url": "/posts/creating-our-process/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:30:00 +0800",
    





    
    "snippet": "  High-level summary on how a process works  There are two terms that we’d ought to familiarise ourselves with here. One being process definition, and the other process instance. Currently, we are ...",
    "content": "  High-level summary on how a process works  There are two terms that we’d ought to familiarise ourselves with here. One being process definition, and the other process instance. Currently, we are creating a process definition, which can be thought of as a base blueprint for a process instance. There can be multiple process instances, which are created(or more properly-termed ‘instantiated’) when the employee wants to submit a request. Each instance is different from each other and may end with varying results. This is primarily reliant on differences in process variables that are defined by user input(like our employee and request variable that needs to be filled up by the requester) as well as outputs from functions executed along the flow.Now, we shall design the business process and define its flow. Because this is a demo application, we’ll keep things simple instead of creating overwhelmingly complex processes.  Scenario Reference  In our portal, we’ll have an actor who submits a request, groups of actors who process the request and a final actor who decides whether the request is approved or not. Ultimately, all of these actors are employees, so that can be declared as an object of itself. Then, we also have the request object, which should contain information about the request made by the first actor.Our goal now is to turn the above thoughts into action. Let’s start off by adding a new business process asset into the project and naming it ‘request-portal’. Below is a reference image and a spoiler for what our business process will look like at the end of the day.ADD REFERENCE IMAGESubmission StageFrom the above scenario reference, we know that our process involves these three stages: submission, processing and a final approval. To represent submission(i.e the start of the process), we will drag a start node(the plain green circle) into our editor space.Processing StagesNow, in the processing stage, we can break it down into two sub-stages: manual filtering by Processing Officers, and the assignment of the appropriate department manager by a Human Resources team.Creating our user task nodesSince these are tasks assigned to human users, let’s click on the Activities button(can be identified by a plain rounded rectangle on the menu of nodes on the left) and drag in a User node. Then we connect the start node to it. Nodes can be connected together by clicking on the preceding node, selecting the solid arrow icon and dragging it towards the following node. Click on the User node and edit its name to “Manual Filtering” in the Properties window on the right.If there doesn’t appear to be any window, click on the pencil-paper icon on the upper right corner to expand it.Then, we drag in another User node, and we then name it “Department Manager Assignment”.Implementing conditions with a BPMN gatewayBefore connecting the two, we need a BPMN(Business Process Model and Notation) gateway, which can be thought of as a logic gate which helps us implement conditional statements in our process. This gateway is needed to split our results into two cases based on the output of Manual Filtering sub-stage. One being an approval from Processing Officers where it will lead to the next sub-stage(assignment of department manager), and another where it is rejected, and leads to an early-ending and a notice email of rejection to the employee. A list of gateways and what they generally perform can be found here.Let’s click on the Gateways button and drag an “Exclusive” gateway in between our two task nodes, and connect the Manual Filtering node to our gateway. The gateway should then branch out into two paths, but for now, we’ll just connect it to our Department Manager Assignment node.Creating our process variablesNow, we need to define a condition for when the gateway should allow the flow to pass through this branch. We know our condition is that the Processing Officer has to approve of the validity of our request in order for it to pass. Therefore to evaluate this, we need some variable that indicates whether the Processing Officers approve of it or not. This is where Process Variables come into play.In order to edit process variables, click on the upper right pencil-paper icon to edit the properties of our process.  Note: If you can’t see any process properties  Ensure that you haven’t selected any nodes, otherwise it’d display the properties of that node instead of the process properties. To de-select a node, just click away from it.Configuring our Manual Filtering nodeThen, scroll down and click on Process Data to expand the list, and there we can edit our process variables. Process variables are variables that we need to keep track of globally throughout the execution of the process. In order to indicate whether the Processing Officer has accepted it, we can create a variable of type boolean named hasBeenValidated. The value of this variable will be decided by Processing Officers in the Manual Filtering task node.Our user task node can be thought of as a manually-driven function. In order to output something, our Processing Officers will need some input parameters to base their output decision on. This will of course be the employee object and the request object. They need to know who exactly made the request, and the details of their request in order to validate it. Therefore, we shall establish these as process variables as well.Add another variable named employee of data type Employee which represents the employee who submitted the request. Then, add another variable named request of data type Request, which represents the request the employee has submitted. At the end of the day, these two variables will be filled up in a form by the employee looking to submit a request to work from home.Now, click on our Manual Filtering node, and expand Implementation/Execution. Fill in the following details:  Task Name: manualFiltering  Subject: Conduct manual filtering for #{employee.name}'s request          Any content written in #{} is treated as a FEEL(Friendly Enough Expression Language) statement. In this case, this statement will refer to our employee process variable and its name field, which is a field we established when we created the Employee data object. So if the employee’s name is James, #{employee.name} will be replaced with ‘James’.        Groups: ManualFilters          This is where groups come into play. We can assign our user task to groups of users or even specific actors with the above Actors tab.        Assignments:          Data Inputs And Assignments(These are the input parameters given to our Processing Officers, who are part of the ManualFilters group):                  Name: employee; Data Type: com.myspace.wfhrequest_portal.Employee; Source: employee          Name: request; Data Type: com.myspace.wfhrequest_portal.Request; Source: request                    Data Outputs And Assignments(These is the output decision that will be manually filled by our Processing Officer)                  Name: hasBeenValidated; Data Type: Boolean; Source: hasBeenValidated                    Configuring our Department Manager Assigment nodeThen, add another variable named manager, which will be the output of our Department Manager Assignment task node. This process variable will be decided by the Human Resources team, who will look up a"
  },
  
  {
    "title": "Creating Data Objects and Groups",
    "url": "/posts/creating-data-objects/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:00:00 +0800",
    





    
    "snippet": "Creating Data ObjectsNow, we will begin adding our assets. First, let’s clarify what objects we’d need for our request portal. The best way to do this is to visualise our process by creating a scen...",
    "content": "Creating Data ObjectsNow, we will begin adding our assets. First, let’s clarify what objects we’d need for our request portal. The best way to do this is to visualise our process by creating a scenario and analysing it.In our portal, we’ll have an actor who submits a request, groups of actors who process the request and a final actor who decides whether the request is approved or not. Ultimately, all of these actors are employees, so that can be declared as an object of itself. Then, we also have the request object, which should contain information about the request made by the first actor.Employee Data ObjectNow, let’s add a Data Object(which are underlyingly Java object classes with fields you can define) named Employee and package it under “com.myspace.wfhrequest_portal”. Let’s add some fields which define the attributes of each employee.Add the fields:  Identifier: eid          Label: Employee ID      Type: Long        Identifier: email          Label: Email      Type: String        Identifier: name          Label: Name      Type: String      We then save the object by clicking on “Save”.Request Data ObjectWe’ll add another Data Object named Request, and package it under “com.myspace.wfhrequest_portal”. Now, we’ll define the attributes for our Request object.Add the fields:  Identifier: numOfDays          Label: Number of Days      Type: Integer        Identifier: reason          Label: Reason      Type: String        Identifier: reqDt          Label: Rq Dt      Type: Integer      numOfDays represents the number of days the employee will be working from home, starting on reqDt(the requested date). reason represents the reason for the request. Once again we save the object.Creating our groupsIn jBPM, we have what we call groups. Groups enable us to organise users into their respective teams and/or departments. In our scenario, our groups of actors who process the request can be broken down into two groups. For now, that’s all we have to know.Let’s create the groups by clicking on the cog icon on the top-right corner and clicking on “Groups”. Click “New Group” and name it “HR” for Human Resources. Then, we will be prompted to assign users to that group. We can just assign ourselves to the group. Next, repeat the same step but name the group “ManualFilters”."
  },
  
  {
    "title": "Getting Started with jBPM",
    "url": "/posts/getting-started-with-jbpm/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:00:00 +0800",
    





    
    "snippet": "Starting the jBPM ServerOnce we have installed jBPM and unzipped its contents, we can begin by navigating to the ‘bin’ folder and running ‘standalone.bat’. This will get the jBPM server up and runn...",
    "content": "Starting the jBPM ServerOnce we have installed jBPM and unzipped its contents, we can begin by navigating to the ‘bin’ folder and running ‘standalone.bat’. This will get the jBPM server up and running. Once the server is up, navigate to Business Central(“https://localhost:8080/business-central/”) where we’ll be met by the Business Central login page.Getting started with Business CentraljBPM comes with a few default accounts for us to access, one of which includes our primary user, wbadmin, which we will use to log in to Business Central with the password, “wbadmin”. By default, account passwords are the same as their usernames, except for kie-server, which uses the password “kieserver1!”. To access the list of accounts available to us, log in, and click on the cog icon on the top right of the screen and click on users.  In short, Business Central is a web-based application for users to implement, execute and monitor business processes.Creating our ProjectNow, we navigate to the Design tab and click on Projects. Next, add a new space named “MySpace”, enter your new space, add a new project and name it “WFHRequest-Portal”.  Note: Follow the specified names  Please follow the specified names because the application that we will be deploying later does in fact use these names. So make sure each name matches perfectly.Next, we’ll begin adding assets into our project and developing it."
  },
  
  {
    "title": "Introduction",
    "url": "/posts/introduction/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:00:00 +0800",
    





    
    "snippet": "  Disclaimer  I am by no means a professional on the topics mentioned nor the technologies, rather, this documentation is a blog on my experience as an amateurand hopefully serves as a light in the...",
    "content": "  Disclaimer  I am by no means a professional on the topics mentioned nor the technologies, rather, this documentation is a blog on my experience as an amateurand hopefully serves as a light in the dark for beginners or any curious developers looking to perform a little project with business automation.What is jBPM?jBPM is a business automation tool for automating business processes with ease, and providing accessibility through REST APIs and comprehensive documentation for said APIs. Optionally, with jBPM as a foundation, we can also build our own powerful applications and tools to personalise our experience, one of which includes qBPM.What is qBPM?qBPM is a demonstrative web application for showcasing how jBPM can be used to create powerful tools through smooth integrations with various open source technologies.Purpose of this DocumentationThis documentation will be dedicated to walking you through how you can set up a jBPM server, customise it to fit our needs, utilise jBPM to create automated processes, and integrate them with qBPM, our own custom webapp for presenting these automated processes.What will we be creating in this walkthrough?We will be using jBPM to create a work from home request portal to automate the process of requesting to work from home. This will help ease the lives of our HR team as well as employees.Prerequisites  Installation of jBPM Server Distribution  Node.js LTS  Postgres  JDK 17  Stable version of Apache Maven  Visual Studio Code  Note  Every process mentioned in this documentation is based on my experience in Windows 10, so do keep in mind that results may vary from operating system to operating system"
  }
  
]

