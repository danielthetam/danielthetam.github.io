[
  
  {
    "title": "Google Classroom x Trello Integration App",
    "url": "/posts/gc-x-trello-integration/",
    "categories": "Projects",
    "tags": "",
    "date": "2024-12-26 15:00:00 +0800",
    





    
    "snippet": "This documentation here is a tutorial on how you can set up the GCxTrelloIntegration app for your own personal use. This script was initially made for myself when we used Google Classroom for schoo...",
    "content": "This documentation here is a tutorial on how you can set up the GCxTrelloIntegration app for your own personal use. This script was initially made for myself when we used Google Classroom for school assignments back in 2020. Now I have updated it following the changes in Google and Trello’s protocol.  Feature requests can be sent to me through the “Contact” page on my website.Feel free to build upon this script to make an actual Trello app that others can use.Google Classroom will be abbreviated as “GC” from now on.Prequisites  Python 3.10.7 or greaterpip package management toolGetting your credentials.json file from GoogleTo start using the GC API, Google needs to some way of identifying the script/app that will be calling its services. So our first step should be to register our app and get the proper credentials.First, create your own Google Cloud project. Then, enable its use of google’s APIs and Services in the project menu. After doing that, follow the instructions in here starting from “Enable the API” up to “Install the Google client library”.  Make sure to save the ‘credentials.json’ fileThen, download the project files from my GitHub, and store it in a dedicated project directory. Next, move the ‘credentials.json’ file to the project directory.Integrating trelloIn our script, we used py-trello, a wrapper for Trello’s REST service. Just like our GC API, we now need to register our app to use the API. First, navigate to Trello’s Power-Ups &amp; Integrations page. Create a new integration and fill in the details. You can leave the iframe connector field empty.After creating it, you should be prompted with the option to generate a new API key. You will then be shown your API key and secret after generation. Next, go to the project directory and edit the “.env” file. Replace the strings with your corresponding API key and secret. Then, navigate to the “API key” tab, and to the right there should be a wall of text. Click on the link to generate a “Token”. Click “Allow”, and you will be given a token.  Your tokens and API keys should all be kept private. Do not share them with others.Then, replace the string in the “.env” file with your token.Next, run “quickstart.py”. You should then be redirected to for manual authorisation of the app. Ensure you authorise using the Google account that is a member of the class you are trying to pull your assignments from."
  },
  
  {
    "title": "Introduction",
    "url": "/posts/introduction/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 15:00:00 +0800",
    





    
    "snippet": "  Disclaimer  I am by no means a professional on the topics mentioned nor the technologies; rather, this documentation is a blog on my experience as an amateurand hopefully serves as a light in the...",
    "content": "  Disclaimer  I am by no means a professional on the topics mentioned nor the technologies; rather, this documentation is a blog on my experience as an amateurand hopefully serves as a light in the dark for beginners or any curious developers looking to perform a little project with business automation.What is jBPM?jBPM is a business automation tool for automating business processes with ease and providing accessibility through REST APIs and comprehensive documentation for said APIs. Optionally, with jBPM as a foundation, we can also build our own powerful applications and tools to personalise our experience. One of these applications include qBPM.What is qBPM?qBPM is a demonstrative web application for showcasing how jBPM can be used to create powerful tools through smooth integrations with various open source technologies.Purpose of this documentationThis documentation will be dedicated to walking you through how you can set up a jBPM server, customise it to fit your needs, utilise jBPM to create automated processes, and integrate them with qBPM, our own custom webapp for presenting these automated processes.What will we be creating in this walkthrough?We will be using jBPM to create a work-from-home request portal to automate the process of requesting to work from home. This will help ease the lives of our HR team as well as our employees.Prerequisites  Installation of jBPM Server Distribution  Node.js LTS  Postgres setup          Only install the setup and do not open it yet unless you know what you’re doing as I will be guiding you through this due to important configurations you need to follow for qBPM to work.        JDK 17  Stable version of Apache Maven          Apache Maven allows us to build our qBPM application by installing the neccessary dependencies.        Visual Studio Code  I recommend that you watch a video or read an article on how to install each software listed above(aside from jBPM as it’s just a straightforward zip file) as they will guide you through the installation process step by step. As a beginner it can be confusing when you see all the cryptic installation configurations.  Note  Every process mentioned in this documentation is based on my experience with Windows 10, so do keep in mind that results may vary from operating system to operating system.Video Showcase of qBPMqBPM Showcase"
  },
  
  {
    "title": "Getting Started with jBPM",
    "url": "/posts/getting-started-with-jbpm/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:59:00 +0800",
    





    
    "snippet": "Starting the jBPM ServerOnce we have installed jBPM and unzipped its contents, we can begin by navigating to the ‘bin’ folder and running ‘standalone.bat’. This will get the jBPM server up and runn...",
    "content": "Starting the jBPM ServerOnce we have installed jBPM and unzipped its contents, we can begin by navigating to the ‘bin’ folder and running ‘standalone.bat’. This will get the jBPM server up and running. Once the server is up, navigate to Business Central(“https://localhost:8080/business-central/”) where we’ll be met by the Business Central login page.  It may take a while for the server to start, so don’t panic if you’re having trouble accessing Business Central after only a few seconds of running the batch file.Getting started with Business CentraljBPM comes with a few default accounts for us to access, one of which includes our primary user,wbadmin, which we will use to log in to Business Central with the password, wbadmin. By default, account passwords are the same as their usernames, with kie-server being an exception as it uses the password “kieserver1!”. To access the list of accounts available to us, log in, and click on the cog icon on the top-right of the screen and click on users.  In short, Business Central is a web-based application for users to implement, execute and monitor business processes.Creating our ProjectNow, we navigate to the Design tab and click on Projects. Next, add a new space named “MySpace”, enter your new space, add a new project and name it “WFHRequest-Portal”.  Note: Follow the specified names  Please follow all the specified names as the application that we will be deploying later does in fact use these names. So make sure each name matches perfectly.Next, we’ll begin adding assets into our project and developing it."
  },
  
  {
    "title": "Creating Data Objects and Groups",
    "url": "/posts/creating-data-objects/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:58:00 +0800",
    





    
    "snippet": "Creating Data ObjectsNow, we will begin adding our assets. First, let’s clarify what objects we’d need for our request portal. The best way to do this is to visualise our process by creating a scen...",
    "content": "Creating Data ObjectsNow, we will begin adding our assets. First, let’s clarify what objects we’d need for our request portal. The best way to do this is to visualise our process by creating a scenario and analysing it.In our portal, we’ll have an actor who submits a request, groups of actors who process the request and a final actor who decides whether the request is approved or not. Ultimately, all of these actors are employees, so that can be declared as an object in and of itself. Then, we also have the request object, which should contain information about the request made by the first actor.Employee Data ObjectNow, let’s add a Data Object(which are underlyingly Java object classes with fields you can define) named Employee and package it under “com.myspace.wfhrequest_portal”. Let’s add some fields which define the attributes of each employee.Add the fields:  Identifier: eid          Label: Employee ID      Type: Long        Identifier: email          Label: Email      Type: String        Identifier: name          Label: Name      Type: String      We then save the object by clicking on “Save”.Request Data ObjectWe’ll add another Data Object named Request, and package it under “com.myspace.wfhrequest_portal”. Now, we’ll define the attributes for our Request object.Add the fields:  Identifier: numOfDays          Label: Number of Days      Type: Integer        Identifier: reason          Label: Reason      Type: String        Identifier: reqDt          Label: Rq Dt      Type: Integer      numOfDays represents the number of days the employee will be working from home, starting on reqDt(the requested date). reason represents the reason for the request. Once again we save the object.Creating our groupsIn jBPM, we have what we call groups. Groups enable us to organise users into their respective teams and/or departments. In our scenario, the groups who process the request can be broken down into two separate groups of actors. For now, that’s all we have to know.Let’s create the groups by clicking on the cog icon on the top-right corner and clicking on “Groups”. Click “New Group” and name it “HR” for Human Resources. Then, we will be prompted to assign users to that group. We can just assign ourselves to the group. Next, repeat the same step but name the group “ManualFilters”."
  },
  
  {
    "title": "Creating Our Business Process",
    "url": "/posts/creating-our-process/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:57:00 +0800",
    





    
    "snippet": "  A high-level summary on how a process works  There are two terms that we’d ought to familiarise ourselves with here. One being process definition, and the other process instance. Currently, we ar...",
    "content": "  A high-level summary on how a process works  There are two terms that we’d ought to familiarise ourselves with here. One being process definition, and the other process instance. Currently, we are creating a process definition, which can be thought of as a base blueprint for a process instance. There can be multiple process instances, which are created(or more properly-termed ‘instantiated’) when the employee wants to submit a request. Each instance is different from the other and may end with varying results. This is primarily reliant on differences in process variables that are defined by user input(like our employee and request variable that needs to be filled up by the requester) as well as outputs from functions executed along the flow.Now, we shall design the business process and define its flow. Because this is a demo application, we’ll keep things simple instead of creating overwhelmingly complex processes.  Scenario Reference  In our portal, we’ll have an actor who submits a request, groups of actors who process the request and a final actor who decides whether the request is approved or not. Ultimately, all of these actors are employees, so that can be declared as an object in and of itself. Then, we also have the request object, which should contain information about the request made by the first actor.Our goal now is to turn the above thoughts into action. Let’s start off by adding a new business process asset to the project and naming it ‘request-portal’. Below is a reference image and a teaser for what our business process will look like at the end of the day.Submission StageFrom the above scenario reference, we know that our process involves these three stages: submission, processing, and a final approval. To represent submission(i.e the start of the process), we will drag a start node(the plain green circle) into our editor space.Processing StagesNow, in the processing stage, we can break it down into two sub-stages: manual filtering by Processing Officers, and the assignment of the appropriate department manager by a Human Resources team.Creating our user task nodesSince these are tasks assigned to human users, let’s click on the Activities button(which can be identified by a plain rounded rectangle on the menu of nodes on the left) and drag in a User node. Then we connect the start node to it. Nodes can be connected together by clicking on the preceding node, selecting the solid arrow icon, and dragging it towards the following node. Click on the User node and edit its name to “Manual Filtering” in the Properties window on the right.If there doesn’t appear to be any window, click on the pencil-paper icon in the upper-right corner to expand it.Then, we drag in another User node, and we then name it “Department Manager Assignment”.Implementing conditions with a BPMN gatewayBefore connecting the two, we need a BPMN(Business Process Model and Notation) gateway, which can be thought of as a logic gate that helps us implement control flow in our process. This gateway is needed to split our results into two cases based on the output of the Manual Filtering sub-stage. One being an approval from Processing Officers where it will lead to the next sub-stage(assignment of department manager), and another where it is rejected, and leads to an early-ending and a notice email of rejection to the employee. A list of gateways and what they generally perform can be found here.Let’s click on the Gateways button(orange rhombus) and drag an “Exclusive” gateway in between our two task nodes. Expand the properties window and name it “Processing Officer Decision”, and connect the Manual Filtering node to our gateway. The gateway should then branch out into two paths, but for now, we’ll just connect it to our Department Manager Assignment node.Creating our process variablesNow, we need to define a condition for when the gateway should allow the flow to pass through this branch. We know our condition is that the Processing Officer has to approve of the validity of our request in order for it to pass. Therefore to evaluate this, we need some variable that indicates whether the Processing Officers approve of it or not. This is where process variables come into play.In order to edit process variables, click on the upper right pencil-paper icon to edit the properties of our process.  Note: If you can’t see any process properties  Ensure that you haven’t selected any nodes, otherwise it’d display the properties of that node instead of the process properties. To de-select a node, just click on any empty space.Then, scroll down and click on Process Data to expand the list, and there we can edit our process variables. Process variables are variables that we need to keep track of globally throughout the execution of the process.Configuring our Manual Filtering nodeIn order to indicate whether the Processing Officer has accepted it, we can create a variable of type boolean named hasBeenValidated. The value of this variable will be decided by Processing Officers in the Manual Filtering task node.Our user task node can be thought of as a manually-driven function. In order to output something, our Processing Officers will need some input parameters to base their output decision on. This will of course be the employee object and the request object. They need to know who exactly made the request, and the details of their request in order to validate it. Therefore, we shall establish these as process variables as well.Add another variable named employee of data type Employee which represents the employee who submitted the request. Then, add another variable named request of data type Request, which represents the request the employee has submitted. At the end of the day, these two variables will be filled up in a form by the employee looking to submit a request to work from home.Now, click on our Manual Filtering node, and expand Implementation/Execution. Fill in the following details:  Task Name: manualFiltering  Subject: Conduct manual filtering for #{employee.name}'s request          Any content written in #{} is treated as a FEEL(Friendly Enough Expression Language) statement. In this case, this statement will refer to our employee process variable and its name field, which is a field we established when we created the Employee data object. So if the employee’s name is James, #{employee.name} will be replaced with ‘James’.        Groups: ManualFilters          This is where groups come into play. We can assign our user task to groups of users or even specific actors with the above Actors tab.        Assignments:          Data Inputs And Assignments(These are the input parameters given to our Processing Officers, who are part of the ManualFilters group):                  Name: employee; Data Type: com.myspace.wfhrequest_portal.Employee; Source: employee          Name: request; Data Type: com.myspace.wfhrequest_portal.Request; Source: request                    Data Outputs And Assignments(This is the output decision that will be manually filled by our Processing Officer)                  Name: hasBeenValidated; Data Type: Boolean; Source: hasBeenValidated                    Configuring our Department Manager Assigment nodeThen, add another variable named manager of type String, which will be the output of our Department Manager Assignment task node. The value of this process variable will be assigned by the Human Resources team, who will find the employee’s department manager and tell jBPM which user the final task should be assigned to.Click on the Department Manager Assignment node, and expand Implementation/Execution. Fill in the following details:  Task Name: managerAssignment  Subject: Assign the appropriate department manager  Groups: HR  Assignments:          Data Inputs And Assignments(No request object because HR doesn’t need to know request details):                  Name: employee; Data Type: com.myspace.wfhrequest_portal.Employee; Source: employee                    Data Outputs And Assignments                  Name: manager; Data Type: String; Source: manager                    Last process variableLastly, add another process variable named hasBeenApproved, which is a Boolean that indicates whether the request has been approved by the department manager and ultimately decides whether the request is granted.Connecting our BPMN gateway and task nodesFinally, connect our Manual Filtering node to our exclusive gateway, and connect the gateway to our Department Manager Assignment node. Then, click on the arrow leading from the gateway to our Department Manager Assignment node, and open Implementation/Execution. Change the condition expression to Expression and add this statement into the field: hasBeenValidated = true. Now, this path will only be open when the condition is met. We will handle the opposite case for when the Processing Officer rejects it later on.Creating and configuring our final approval task nodeNow, again, add a new user task node and name it “Department Manager Approval”. Connect the Department Manager Assignment node to our new node, and click on our new node. Again, expand Implementation/Execution and enter the following details:Task Name: approveRequestSubject: Approve the work from home requestActors:  #{manager}          This statement gets the value of our manager process variable and so assigns the task to the manager as specified by our HR team.        wbadmin          We do this because our application that uses jBPM’s REST API requires authentication to complete a user’s reserved task(task that it reserved for that specific user, just like our manager and the approval task), but for security reasons and the way we hash account passwords, we cannot access the manager’s credentials.      Therefore, we create a workaround by establishing a system account for all authentication, and also assign reserved tasks to them in order for the task to be completed through authentication from our system account.      We shall establish wbadmin as our system account.        Assignments:          Data Inputs And Assignments:                  Name: employee; Data Type: com.myspace.wfhrequest_portal.Employee; Source: employee          Name: request; Data Type: com.myspace.wfhrequest_portal.Request; Source: request                    Data Outputs And Assignments                  Name: hasBeenApproved; Data Type: Boolean; Source: hasBeenApproved                    Creating a new custom taskjBPM enables us to create our own custom task, one of which includes an automated email task. All we need to do is set up a SMTP server or in our case, we’ll use a SMTP hosting service. We will be using an email delivery service called Elastic Email.First, create an account and log into it. You’ll have to then perform a simple account verification. After that, click on settings, and click on Create SMTP credentials. This will allow us to create new credentials on their domain. Enter your desired email, and click on “Create”. A window will pop up displaying your SMTP credentials. Ensure that you note the provided password down as you’ll only see it once.Now, hop on back to Business Central, head to your project explorer(where you can view all your projects’s assets) and click on the “Settings” tab. Click on “Custom Tasks”, and install the email functionality. Enter the parameters according to what Elastic Email has given you and click Install. Now, if you head back to the project explorer, you will see a new asset called Email. Once you’ve verified that, dive back into our business process asset.Finishing touches: connecting all our nodesNow, connect our Department Manager Approval node to a new exclusive gateway, and name it “Department Manager Decision”. This exclusive gateway will determine the path of the process based on the value of hasBeenApproved.If it is true, it will lead to our custom email task where we email the employee and let them know that their request has been approved.If it is false, it will let them know that their request has been rejected.These tasks will be known as Approval Notice and Rejection Notice. Now, click on the Custom Tasks(icon of cogs) button to add our new custom email task to the editorial space. Name it Approval Notice. Then, connect the new exclusive gateway to our new custom task, click on the arrow, and add the following expression: hasBeenApproved = true and hasBeenValidated = true. Now the approval email will only be sent when both Processing Officers and Department Manager approve of the request. Finally, add an End node and connect the custom task to it to signify the end of the process.For now, we know that our process can be led to Rejection Notice from two paths.  From the rejection of Processing Officers at the start  The approval of Processing Officers at the start but the rejection of the Department Manager in the end.To combine these two paths, we shall create another exclusive gateway just to organise these two paths into one that leads to the same result. Now, place a new exclusive gateway, and connect our Department Manager Decision gateway to it. Click on the arrow, and add the condition: hasBeenApproved = false or hasBeenValidated = false. Lastly, also connect our “Processing Officer Decision” gateway to the same gateway. Click on the arrow, and add the condition hasBeenValidated = false.Add a new custom email task and name it Rejection Notice. Finally, connect our new gateway to this node and connect the email task to another end node. At last, our work for the business process is finished and we can save it."
  },
  
  {
    "title": "Deploying our Business Process",
    "url": "/posts/deploying-our-process/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:56:00 +0800",
    





    
    "snippet": "Deploying our projectBefore we deploy our project, we need to generate the forms required for our process. To do this, head into our request-portal process, click on the form button(form icon to th...",
    "content": "Deploying our projectBefore we deploy our project, we need to generate the forms required for our process. To do this, head into our request-portal process, click on the form button(form icon to the left of the Download button), and click Generate all forms. This will generate all dedicated forms for our business process. Once generated, we should see some new form assets in our project.Now, head over to the form named WFHRequest-Portal.request-portal-taskform. This is our main process form and is what is shown to the employee who starts the process instance to submit a request. By default, the form generates fields for all process variables, but we only want the employee to fill up the employee and request process variables. Therefore, we may remove all other fields besides the mentioned two by clicking on the vertical ellipsis icon and clicking remove.Once complete, we can exit to the project explorer and hit Deploy to deploy our project.Testing our projectOnce the project has finished building, you can click the Menu button and click on the process definition tab. Click on the vertical ellipsis beside our request-portal process definition, and click start to create a new process instance. Next, fill in the form details.Now, click on the Menu again and click on the Task Inbox. Through there, you can access user tasks assigned to you or your group. You may then monitor the progression of each process instance and their details by clicking on Menu, clicking on Process Instances and clicking into your desired instance."
  },
  
  {
    "title": "Preparation for jBPM integration",
    "url": "/posts/preparation-for-integration/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:55:00 +0800",
    





    
    "snippet": "How does integration work?As previously mentioned, jBPM allows for smooth integration with its accesible and well-secured REST API. It enables us to create our own powerful tools that act as an ext...",
    "content": "How does integration work?As previously mentioned, jBPM allows for smooth integration with its accesible and well-secured REST API. It enables us to create our own powerful tools that act as an extension of jBPM, an example of such is the one I’ve created for demonstrative purposes, qBPM.Before we begin, we need to understand the structure of qBPM. qBPM uses a React frontend and a SpringBoot backend. Aside from serving as our React application’s API, SpringBoot serves as a proxy between jBPM and our client-side due to browser CORS policies preventing us from sending requests to jBPM(at least for me) through our React application. Besides, I find it more organised to have my client application only call from a single domain and have my backend do most of the dirty work.Configuring jBPMBefore we begin downloading the codebase and setting things up, we need to configure our jBPM’s system settings. As previously mentioned, jBPM’s REST API requires authentication to access it. That’s why we use wbadmin as our system admin account and use its credentials for authentication.However, when we want to get tasks specific to a user, let’s name them User B, by default it only returns tasks that are available for the user that we use for authentication(i.e wbadmin’s tasks). In order to get the tasks for User B while using wbadmin’s credentials instead of User B’s credentials, we need to enable bypass authentication in jBPM’s configuration.  We can’t use User B’s credentials because qBPM ensures that passwords are hashedLet’s get straight to that. Navigate to jBPM’s root folder, enter the standalone folder, enter configuration, and edit standalone.xml. Under the &lt;system-properties&gt; tag, add the line: &lt;property name=\"org.kie.server.bypass.auth.user\" value=\"true\"/&gt;. Save it, and restart jBPM."
  },
  
  {
    "title": "Integrating with jBPM",
    "url": "/posts/integrating-with-jbpm/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:54:00 +0800",
    





    
    "snippet": "Setting up our Postgres databaseOpen your Postgres setup, and just step through everything while following the default configurations, but ensure that you note down your password and your host, and...",
    "content": "Setting up our Postgres databaseOpen your Postgres setup, and just step through everything while following the default configurations, but ensure that you note down your password and your host, and also make sure that Command Line Tools is ticked as an installation configuration.After installation, search for psql in your search bar and open the application. Once you open it, you’ll see something like this: Server [localhost]:, we can just hit enter until we get to Password for user xxx: where you have to type the password you noted down during the setup.Once you have logged in, we can go ahead and create a new database by typing CREATE DATABASE qbpm;. Ensure you put a semi-colon after every statement because it marks the end of a statement in SQL(Structured Query Language).Configuring SpringBoot’s application propertiesNow, we shall set up qBPM. Go ahead and download or clone this GitHub repository. Once you have downloaded it, navigate to API\\src\\main\\resources\\application.properties and edit it with any simple text editor.If you have prior experience in Postgres and did not follow the steps above, change the value of spring.datasource.url to this jdbc:postgresql://host:port/database where you change the values host, port, database with the appropriate details. If you have been following the default values and the steps above, you can leave it as is.Next, change the value of spring.datasource.username to your user account(by default it is postgres), and change the value of spring.datasource.password to the password you noted down.Running qBPMRunning the SpringBoot APINow, open Visual Studio Code, head to the top menu bar, click on File &gt; Open Folder and navigate to the API folder and open it. Then, click on the Extension button(4x4 cube with a detached top-right cube) on the left menu bar, and search for the extension Spring Extension Pack. This will download all the required extensions to run our application. After installation, navigate to the top menu bar again and click on Terminal &gt; New Terminal. Then, in your terminal, enter &amp; 'C:\\Program Files\\Java\\jdk-17\\bin\\java.exe' '-cp' 'C:\\Users\\yourusername\\AppData\\Local\\Temp\\cp_2e9afgjm2aisca0ev8fztta4w.jar' 'com.daniel.qbpm.qBPMApplication'. Ensure that you change yourusername to your username.Running the React APINow, go to File &gt; New Window. In the new window, repeat the same step to open a folder but open the react-view folder instead. Then, open a new terminal, enter the command npm install, and npm(node package manager) will install all the required packages for you. After it is done, enter the command npm start to start the React application. Then, open https://localhost:3000 to access the app."
  },
  
  {
    "title": "Errors to Note",
    "url": "/posts/errors-to-note/",
    "categories": "Projects, jBPM-qBPM",
    "tags": "",
    "date": "2023-09-16 14:53:00 +0800",
    





    
    "snippet": "If SpringBoot produces an error that states that the port is in use, that means you have to navigate back to the application.properties file and change the server port to any open port on your devi...",
    "content": "If SpringBoot produces an error that states that the port is in use, that means you have to navigate back to the application.properties file and change the server port to any open port on your device.In the case that any other errors come up, do attempt to search it up as setup will differ from environment to environment, or as a last resort, you may contact me from my website."
  }
  
]

